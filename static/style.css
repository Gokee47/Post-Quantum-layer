<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Quantum-Resistant IoT Server</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body class="bg-dark text-light">
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.text-gradient {
  background: linear-gradient(90deg, #00ffcc, #0099ff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.badge-gradient {
  background: linear-gradient(to right, #00c6ff, #0072ff);
  color: white !important;
  border: none;
  padding: 0.5em 1em;
  font-weight: bold;
  border-radius: 0.5rem;
  box-shadow: 0 0 10px rgba(0, 198, 255, 0.4);
  display: inline-block;
}

.card-dark {
  background-color: #121212 !important;
  color: white !important;
  border: none;
}

  <div class="container py-5">
    <div class="text-center mb-4">
      <h1 class="fw-bold text-gradient">Quantum-Resistant IoT Server</h1>
      <p class="lead">🚀 Welcome to <strong>Digital Dawn Security</strong><br>
      Post-Quantum Layer for IoT Data Protection</p>
    </div>

    <!-- Status Card -->
    <div class="card shadow-lg text-center p-4 bg-dark text-light border-0">
      <h3 class="mb-3">🔐 Secure Layer</h3>
      <p><span id="quantum-layer" class="badge bg-success">Loading...</span></p>

      <h3 class="mb-3">🖥️ Server Status</h3>
      <p><span id="server-status" class="badge bg-warning">Checking...</span></p>

      <button class="btn btn-lg btn-outline-light mt-3" onclick="checkStatus()">🔄 Refresh Status</button>
    </div>

    <!-- IoT Data Logs -->
    <div class="mt-5">
      <h4>📡 Last IoT Message</h4>
      <div class="alert alert-info" id="iot-message">
        Waiting for device data...
      </div>
    </div>
  </div>

<script>
  async function checkStatus() {
    try {
      const res = await fetch("/status");
      if (!res.ok) throw new Error("Server error");

      const data = await res.json();

      // Update status badges
      document.getElementById("quantum-layer").innerText = data.quantum_layer;
      document.getElementById("server-status").innerText = data.status;

      // Update timestamp
      const now = new Date().toLocaleTimeString();
      document.getElementById("status-timestamp").innerText = `Status polled at ${now}`;

      // Optional: Add diagnostic message
      document.getElementById("status-log").innerText =
        `🧠 Diagnostic: Quantum layer verified, server operational at ${now}`;
    } catch (err) {
      document.getElementById("server-status").innerText = "Error fetching status";
      document.getElementById("status-log").innerText = "❌ Diagnostic: Server unreachable";
    }
  }
</script>


  // Auto-refresh status on page load
  window.onload = checkStatus;
</script>
</body>
</html>
